// This is your Prisma schema file

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  Admin
  User
}

//! User 
model User {
  id                       Int       @id @default(autoincrement())
  firstname                String
  lastname                 String
  email                    String    @unique
  password                 String
  phone_number             String    @unique
  role                     Role
  avatar                   String?
  resetPasswordToken       String?
  resetPasswordTokenExpiry DateTime?
  createdAt                DateTime  @default(now()) @map("created_at")
  updatedAt                DateTime  @updatedAt @map("updated_at")

  Wishlist Wishlist[]

  // Correct relation for events_booked
  events_booked  Event[]
  blogs_approved Blog[]  @relation("ApprovedBlogs")
  blogs_author   Blog[]  @relation("BlogAuthor")
}

//! Category Table
model Category {
  id            Int       @id @default(autoincrement())
  category_name String    @unique
  category_icon String
  products      Product[]
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")
}

//! Wishlist
model Wishlist {
  id        Int       @id @default(autoincrement())
  userId    User?     @relation(fields: [user_id], references: [id])
  user_id   Int?      @unique
  product   Product[]
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
}

//! Amenities
model Amenities {
  id           Int    @id @default(autoincrement())
  amenity_name String

  Product   Product? @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
}

//! Product 
model Product {
  id                Int            @id @default(autoincrement())
  title             String
  price             Int
  description       String
  address           String
  short_description String?
  category          Category       @relation(fields: [category_id], references: [id], onDelete: Cascade)
  category_id       Int
  amenities         Amenities[]
  product_image     ProductImage[]
  rules             Rules[]
  halls             Hall[]

  Wishlist   Wishlist? @relation(fields: [wishlistId], references: [id])
  wishlistId Int?

  event     Event[]
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
}

//! Hall
model Hall {
  id            Int      @id @default(autoincrement())
  hall_name     String
  hall_capacity Int
  is_booked     Boolean?

  Product   Product? @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int?
  event     Event?   @relation(fields: [eventId], references: [id])
  eventId   Int?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
}

//! Rules
model Rules {
  id          Int    @id @default(autoincrement())
  description String

  Product   Product? @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
}

//! Product Image
model ProductImage {
  id  Int    @id @default(autoincrement())
  url String

  Product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
}

//! Blogs
model Blog {
  id                Int      @id @default(autoincrement())
  title             String   @unique
  short_description String?
  image             String
  description       String
  is_approved       Boolean?
  author            User?    @relation("BlogAuthor", fields: [authorId], references: [id])
  authorId          Int
  approved_by       User?    @relation("ApprovedBlogs", fields: [approved_by_id], references: [id])
  approved_by_id    Int?
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")
}

//! Venue Table
model Venue {
  id             Int      @id @default(autoincrement())
  venue_name     String
  venue_address  String
  contact_person String
  phone_number   String
  email          String
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")
}

//! Event Table
model Event {
  id             Int       @id @default(autoincrement())
  start_date     DateTime
  end_date       DateTime
  start_time     DateTime?
  end_time       DateTime?
  is_approved    Boolean   @default(false)
  is_rejected    Boolean   @default(false)
  userId         Int
  productId      Int
  approved_by_id Int? // Added field for relation with User

  // Relations
  // Remove the unique constraint from productId
  createdAt DateTime    @default(now()) @map("created_at")
  updatedAt DateTime    @updatedAt @map("updated_at")
  Product   Product     @relation(fields: [productId], references: [id])
  Hall      Hall[]
  EventType EventType[]
  User      User        @relation(fields: [userId], references: [id])
}

model EventType {
  id        Int      @id @default(autoincrement())
  title     String
  Event     Event?   @relation(fields: [eventId], references: [id])
  eventId   Int?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
}
